import telebot  # python -m pip install pyTelegramBotAPI
import sqlite3
from telebot import types
import datetime
from datetime import datetime
import random
import string
import requests
import json
import pandas as pd
from googletrans import Translator

start_time = datetime.now()
print('Запуск...')

childrens = []
teachers = []
parents = []

bot = telebot.TeleBot("6525955496:AAFtRf9Y1BD5Vq_x2QhrXtK80MmmNEgRM1w")
admins = "@agusev2311, @Otaku_Taku"
clases = ["5с", "6с", "7с", "7т", "8с", "8т", "9с", "10с", "11с"]
weatherAPIkey = "061d031e50b24373be834b226c3d75a7"
get_weather_URL = f"https://api.openweathermap.org/data/2.5/weather?q=Moscow&appid={weatherAPIkey}&units=metric&lang=ru"

try:
    weather = requests.get(get_weather_URL)
    if weather.status_code == 200:
        bet_weather = True
        print('Погода работает')
    else:
        print('Погода не работает')
        bet_weather = False
except:
    print('Погода не работает')
    bet_weather = False

conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
cur = conn.cursor()

cur.execute("CREATE TABLE IF NOT EXISTS users (id int varchar(50), name varchar(50), type varchar(50), class varchar(50), mut varchar(50), admin varchar(50))")
conn.commit()

cur.execute("CREATE TABLE IF NOT EXISTS logs (text varchar(1024))")
conn.commit()

cur.execute("CREATE TABLE IF NOT EXISTS tickets (id int varchar(50), user_id varchar(50), name varchar(50), text varchar(512), level varchar(8))")  # levels: 0 - admin, 1 - admin_admin, 2 - creator, 3 - closed, 4 - failed, 5 - banned
conn.commit()

cur.execute("CREATE TABLE IF NOT EXISTS family_codes (code int varchar(50), user_id varchar(50))")  # levels: 0 - admin, 1 - admin_admin, 2 - creator, 3 - closed, 4 - failed, 5 - banned
conn.commit()

cur.execute("CREATE TABLE IF NOT EXISTS homeworks (class varchar(8), text varchar(64), lesson varchar(64), data varchar(64))")
conn.commit()

cur.close()
conn.close()

is_rasp_work = True

global tas
tas = []

rasp = {
    0: {
        5: [[1, "РАЗГОВОРЫ О ВАЖНОМ (Пипейкина) 202"], 
            [2, "Русский (Пипейкина) 202"], 
            [3, "Литература (Пипейкина) 202"], 
            [4, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
            [5, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
            [6, "Русский (Пипейкина) 202"], 
            [7, "Русский (Пипейкина) 202"], 
            [8, "ФИЗ-РА (Ларченко) 127"], 
            [9, "ФИЗ-РА (Ларченко) 127"], 
            [10, "Хор (Краснова + Никулова) 116"], 
            [11, "ДОП. Хор (Краснова+Никулова) 116"]],
        6: [[1, "РАЗГОВОРЫ О ВАЖНОМ  (Харитонов) 201 + ОЛИМПИНФО (Подворный) 409"], 
            [2, "Математика (Дронзик) 210 / Инфо (Старунова) 408"], 
            [3, "Математика (Дронзик) 210 / Инфо (Старунова) 408"], 
            [4, "Инфо (Старунова) 408 / Математика (Дронзик) 210"], 
            [5, "Инфо (Старунова) 408 / Математика (Дронзик) 210"], 
            [6, "ФИЗ-РА (Ларченко) 127"], 
            [7, "ФИЗ-РА (Ларченко) 127"], 
            [8, "Русский Язык (Харитонов) 201"], 
            [9, "Русский Язык (Харитонов) 201"], 
            [10, "Литература (Харитонов) 201"], 
            [11, "ДОП. Хор (Краснова+Никулова) 116 / ДОП Волейбол (Ларченко) СЗ"]],
        7: [[1, "РАЗГОВОРЫ О ВАЖНОМ  (Дронзик) 210 + ОЛИМПИНФО (Сильвестров) 403"], 
            [2, "Хор (Краснова + Никулова) 116 / Олимпинфо (Подворный) 409 / Олимпинфо (Сильвестров) 403"], 
            [3, "Хор (Краснова + Никулова) 116"], 
            [4, "ФИЗ-РА (Ларченко) 127 / Русский (Хуснутдинов) 116"], 
            [5, "ФИЗ-РА (Ларченко) 127 / Русский (Хуснутдинов) 116"], 
            [6, "Русский (Хуснутдинов) 201 / Алгебра (Дронзик) 210"], 
            [7, "Русский (Хуснутдинов) 201 / Теория вероятности и статистика (Дронзик) 210"], 
            [8, "Алгебра (Дронзик) 210 / Физика (Репнев) 402"], 
            [9, "Теория вероятности и статистика (Дронзик) 210 / Физика (Репнев) 402"], 
            [10, "Обществознание (Товченников) 406"], 
            [11, "ДОП. Хор (Краснова+Никулова) 116 / ДОП Волейбол (Ларченко) СЗ"]],
        8: [[1, "РАЗГОВОРЫ О ВАЖНОМ (Репнев) 116"], 
            [2, "Физика (Репнев) 402 / Русский (Харитонов) 201"], 
            [3, "Физика (Репнев) 402 / Русский (Харитонов) 201"], 
            [4, "Русский (Харитонов) 201 / Физика (Репнев) 402"], 
            [5, "Русский (Харитонов) 201 / Физика (Репнев) 402"], 
            [6, "Хор (Краснова + Никулова) 116 / Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
            [7, "Хор (Краснова + Никулова) 116 / Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
            [8, "История (Товченников) 404 / История (Куницын) 409"], 
            [9, "История (Товченников) 404 / История (Куницын) 409"], 
            [10, "МХК (Хуснутдинов)  210 / Обществознание (Куницын) 409"], 
            [11, "Обществознание (Товченников) 404 / МХК (Хуснутдинов) 210"], 
            [12, "Доп. Хор (Краснова+Никулова) 116 / ДОП Волейбол (Ларченко) СЗ"]],
        9: [[1, "РАЗГОВОРЫ О ВАЖНОМ (Краснова) 402"], 
            [2, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
            [3, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
            [4, "История (Куницын) 409"], 
            [5, "История (Куницын) 409"], 
            [6, "Математика (Заводов АА) 209"], 
            [7, "Математика (Заводов АА) 209"], 
            [8, "Хор (Краснова + Никулова) 116 / Допматпрак (Попович) 405"], 
            [9, "Хор (Краснова + Никулова) 116 / Допматпрак (Попович) 405"], 
            [10, "Физика (Репнев) 402"], [11, "Физика (Репнев) 402"], 
            [12, "Доп. Хор (Краснова+Никулова) 116 / ДОП Волейбол (Ларченко) СЗ"]],
        10: [[1, "РАЗГОВОРЫ О ВАЖНОМ (Белоусова) 206"], 
            [2, "Матпрак (Латыпова + Решетниов ИА) 406 / Инд.проект + самоподготовка 105"], 
            [3, "Матпрак (Латыпова + Решетниов ИА) 406 / Инд.проект + самоподготовка 105"], 
            [4, "Математика (Заводов АА) 209"], 
            [5, "Математика (Заводов АА) 209"], 
            [6, "Инд.проект + самоподготовка 403 / Матпрак (Латыпова + Решетниов ИА) 406"], 
            [7, "Инд.проект + самоподготовка 403 / Матпрак (Латыпова + Решетниов ИА) 406"], 
            [8, "Литература (Пипейкина) 202"], 
            [9, "Литература (Пипейкина) 202"], 
            [10, "Исторические танцы ДОП 504 / Доп. Хор (Краснова+Никулова) 116"]],
        11: [[1, "РАЗГОВОРЫ О ВАЖНОМ (Чупина) 401"], 
            [2, "Математика (Заводов АА)  209 / Математика (Чупина) 401"], 
            [3, "Математика (Заводов АА)  209 / Математика (Чупина) 401"], 
            [4, "Литература (Пипейкина) 202"], 
            [5, "Литература (Пипейкина) 202"], 
            [6, "Математика (Чупина) 401 / Право (Куницын)  409"], 
            [7, "Математика (Чупина) 401 / Право (Куницын)  409"],
            [8, "МатПрак (Заводов АА) 209 / Математика (Чупина) 401"],
            [9, "МатПрак (Заводов АА) 209 / Математика (Чупина) 401"],
            [10, "Исторические танцы ДОП 504 / Доп. Хор (Краснова+Никулова) 116"]]
    },
    1: {
        5: [[1, "нет урока"],
            [2, "ТРИЗика (Репнев) 402"],
            [3, "ТРИЗика (Репнев) 402"],
            [4, "История (Товченников)  402"],
            [5, "Инфо (Старунова) 408 / Робототехника (Рогацкина) 410"],
            [6, "Инфо (Старунова) 408 / Робототехника (Рогацкина) 410"],
            [7, "Робототехника (Рогацкина) 410 / Инфо (Старунова) 408"],
            [8, "Робототехника (Рогацкина) 410 / Инфо (Старунова) 408"],
            [9, "ДОП Инженерная мастерская (Рогацкина) 410"],
            [10, "ДОП Инженерная мастерская (Рогацкина) 410 "]], 
        6: [[1, "ДОП Олимп.РУС (Харитонов) 409 / ОЛИМПИНФО (Подворный) 503"],
            [2, "ОДНКР (Старунова) 408 / Харитонов 409 / ОЛИМПИНФО (Подворный) 503"],
            [3, "Инфо (Старунова) 408 / Робототехника (Рогацкина) 410"],
            [4, "Робототехника (Рогацкина) 410 / Инфо (Старунова) 408"],
            [5, "Математика (Дронзик) 210"], [6, "Математика (Дронзик) 210"],
            [7, "История (Товченников) 404 / Театр 508 (Вавилова)"],
            [8, "История (Товченников) 404 / Театр 508 (Вавилова)"],
            [9, "ТРИЗика (Репнев) 402"], 
            [10, "ТРИЗика (Репнев) 402"]], 
        7: [[1, "Геометрия (Дронзик) 210"],
            [2, "Геометрия (Дронзик) 210"],
            [3, "Геометрия (Дронзик) 210 / ФИЗ-РА (Ларченко) 127"],
            [4, "Геометрия (Дронзик) 210 / ФИЗ-РА (Ларченко) 127"], 
            [5, "Физика (Репнев) 402 / Матпрак (Латыпова + Исмаилов) 202"], 
            [6, "Физика (Репнев) 402 / Матпрак (Латыпова + Исмаилов) 202"], 
            [7, "Матпрак (Латыпова + Исмаилов) 202 / Геометрия (Дронзик) 210"], 
            [8, "Матпрак (Латыпова + Исмаилов) 202 / Геометрия (Дронзик) 210"], 
            [9, "Театр 508 (Вавилова) / История (Товченников) 404"], 
            [10, "Театр 508 (Вавилова) / История (Товченников) 404"]], 
        8: [[1, "Алгебра Эпплджек (Чупина) 401 / ОлМат Флаттершай (Кореневский) 201 / Матпрак Пинки Пай (Латыпова + Исмаилов) 202"], 
            [2, "Алгебра Эпплджек (Чупина) 401 / ОлМат Флаттершай (Кореневский) 201 / Матпрак Пинки Пай (Латыпова + Исмаилов) 202"], 
            [3, "Матпрак Флаттершай (Латыпова + Исмаилов) 202 / Алгебра  Пинки Пай (Чупина) 401 / ОлМат Эпплджек (Кореневский) 201"], 
            [4, "Матпрак Флаттершай (Латыпова + Исмаилов) 202 / Алгебра  Пинки Пай (Чупина) 401 / ОлМат Эпплджек (Кореневский) 201"], 
            [5, "Химия (Караванова) 409 / Геометрия (Кореневский) 201"], 
            [6, "Химия (Караванова) 409 / Геометрия (Кореневский) 201"], 
            [7, "Геометрия (Кореневский) 201 / Химия (Караванова) 409"], 
            [8, "Геометрия (Кореневский) 201 / Химия (Караванова) 409"], 
            [9, "ОлМат Пинки Пай (Кореневский) 201 / Матпрак Эпплджек (Латыпова + Исмаилов) 202 / Алгебра Флаттершай (Чупина) 401"], 
            [10, "ОлМат Пинки Пай (Кореневский) 201 / Матпрак Эпплджек (Латыпова + Исмаилов) 202 / Алгебра Флаттершай (Чупина) 401"]],
        9: [[1, "Математика (Заводов АА) 209"], 
            [2, "Математика (Заводов АА) 209"], 
            [3, "Химия (Караванова) 409"], 
            [4, "Химия (Караванова) 409"], 
            [5, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
            [6, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
            [7, "Физика (Репнев) 402"],
            [8, "Физика (Репнев) 402"], 
            [9, "Обществознание (Куницын) 116"], 
            [10, "История (Куницын) 116 / Олимп. геометрия (Попович) 209"], 
            [11, " / Олимп. геометрия (Попович) 209"]], 
        10: [[1, "История (Куницын) 116"], 
             [2, "История (Куницын) 116"], 
             [3, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
             [4, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
             [5, "Математика (Заводов АА) 209"], 
             [6, "Математика (Заводов АА) 209"], 
             [7, "Обществознание (Куницын) 116"], 
             [8, "Обществознание (Куницын) 116"], 
             [9, "Химия (Караванова) 409"], 
             [10, "Химия (Караванова) 409"]], 
        11: [[1, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
             [2, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
             [3, "История (Куницын) 116"], 
             [4, "История (Куницын) 116"], 
             [5, "Математика (Чупина) 401 / Экономика (Куницын) 116"], 
             [6, "Математика (Чупина) 401 / Экономика (Куницын) 116"], 
             [7, "/ Математика (Чупина) 401"],
             [8, "/ Математика (Чупина) 401"]]
    },
    2: {
        5: [[1, "Каллиграфия (Хуснутдинов) 210 / Математика (Кореневский) 209"], 
            [2, "ОДНКР (Старунова) 210 / Математика (Кореневский) 209"], 
            [3, "Русский (Пипейкина) 202"], 
            [4, "География (Колечкин) 409"], 
            [5, "Русский (Пипейкина) 202"], 
            [6, "Литература (Пипейкина) 202"], 
            [7, "Литература (Пипейкина) 202"], 
            [8, "Математика (Кореневский) 409 / ОДНКР (Старунова) 210"], 
            [9, "Математика (Кореневский) 409 / Каллиграфия (Хуснутдинов) 210"]], 
        6: [[1, "Русский Язык (Харитонов) 201"], 
            [2, "География (Колечкин) 409"], 
            [3, "Англ (Алёхина) 403 / Англ (Шевелев) 402"], 
            [4, "Англ (Алёхина) 403 / Англ (Шевелев) 402"], 
            [5, "Русский Язык (Харитонов) 201"], 
            [6, "Литература (Харитонов) 201"], 
            [7, "Литература (Харитонов) 201"], 
            [8, "Кружки: 3D-моделирование (Легошин) 410"], 
            [9, "Кружки: 3D-моделирование (Легошин) 410"]], 
        7: [[1, "Англ (Алёхина) 403 / Англ (Шевелев) 402"], 
            [2, "Англ (Алёхина) 403 / Англ (Шевелев) 402"], 
            [3, "География (Колечкин) 409"], 
            [4, "История науки (Старунова) 210"], 
            [5, "ИНФО (Воронцов) 406 / ИНФО (Аларкон) 408"], 
            [6, "ИНФО (Воронцов) 406 / ИНФО (Аларкон) 408"], 
            [7, "Доп Матпрак (Заводов АА) 209"], 
            [8, "Доп Матпрак (Заводов АА) 209"], 
            [9, "Кружки: 3D-моделирование (Легошин) 410"], 
            [10, "Кружки: 3D-моделирование (Легошин) 410"]],
        8: [[1, "Англ (Домбровская) 405 / Англ (Слоневская) 404 / Алгебра (Чупина) 401"], 
            [2, "Англ (Домбровская) 405 / Англ (Слоневская) 404 / Алгебра (Чупина) 401"], 
            [3, "ИНФО (Аларкон) 408 / ИНФО (Воронцов) 406"], 
            [4, "ИНФО (Аларкон) 408 / ИНФО (Воронцов) 406"], 
            [5, "География (Колечкин) 409 / Алгебра (Чупина) 401"], 
            [6, "Алгебра (Чупина) 401 / География (Колечкин) 409"], 
            [7, "Алгебра (Чупина) 401 / Биология (Белоусова) 116"], 
            [8, "Алгебра (Чупина) 401 / Биология (Белоусова) 116"], 
            [9, "Биология (Белоусова) 116 / Русский Язык (Харитонов)  201"], 
            [10, "Биология (Белоусова) 116 / Олимпиадная экономика (Попович, Кирюшин) 209"], 
            [11, "Олимпиадная экономика (Попович, Кирюшин) 209"]], 
        9: [[1, "ИНФО (Аларкон) 408 / ИНФО (Воронцов) 406"], 
            [2, "ИНФО (Аларкон) 408 / ИНФО (Воронцов) 406"], 
            [3, "Русский Язык (Харитонов) 201"], 
            [4, "Русский Язык (Харитонов) 201"], 
            [5, "Математика (Заводов АА) 209"], 
            [6, "Математика (Заводов АА) 209"], 
            [7, "География (Колечкин) 409"], 
            [8, "Русский Язык (Харитонов) 201"], 
            [9, "Литература (Пипейкина) 202	"]], 
        10: [[1, "ФИЗ-РА (Ларченко) 127"], 
             [2, "Литература (Пипейкина) 202"], 
             [3, "Математика (Заводов АА) 209"], 
             [4, "Математика (Заводов АА) 209"], 
             [5, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
             [6, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
             [7, "ИНФО (Воронцов) 406"], 
             [8, "ИНФО (Воронцов) 406"]], 
        11: [[1, "Мои горизонты (Хуснутдинов) 409"], 
             [2, "ФИЗ-РА (Ларченко) 127"], 
             [3, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
             [4, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
             [5, "Инфо (Старунова) 210 /"], 
             [6, "Инфо (Старунова) 210 /"]]
    },
    3: {
        5: [[1, "Математика (Кореневский) 202 / Театр 508"], 
            [2, "Математика (Кореневский) 202 / Театр 508"], 
            [3, "Театр 508 / Математика (Кореневский) 202"], 
            [4, "Театр 508 / Математика (Кореневский) 202"], 
            [5, "Матпрак (Кореневский) 202 / Инфо (Старунова) 408"], 
            [6, "Матпрак (Кореневский) 202 / Инфо (Старунова) 408"], 
            [7, "Инфо (Старунова) 408 / Матпрак (Кореневский) 202"], 
            [8, "Инфо (Старунова) 408 / Матпрак (Кореневский) 202"], 
            [9, "ДОП Практическая электроника (Рогацкина) 410"], 
            [10, "ДОП Практическая электроника (Рогацкина) 410"]], 
        6: [[1, "Матпрак (Митев) 408 / Математика (Дронзик) 210"], 
            [2, "Матпрак (Митев) 408 / Математика (Дронзик) 210"], 
            [3, "Математика (Дронзик) 210 / Матпрак (Митев) 402"], 
            [4, "Математика (Дронзик) 210 / Матпрак (Митев) 402"], 
            [5, "Русский язык (Харитонов) 201"], 
            [6, "Русский язык (Харитонов) 201"], 
            [7, "Доп Матпрак (Заводов АА) 209 / Доп Практическая электроника (Рогацкина) 410"], 
            [8, "Доп Матпрак (Заводов АА) 209 / Доп Практическая электроника (Рогацкина) 410"], 
            [9, "ДОП Практическая электроника (Рогацкина) 410"], 
            [10, "ДОП Практическая электроника (Рогацкина) 410"]], 
        7: [[1, "ДОП Олимп Физика (Репнев) 402"], 
            [2, "ДОП Олимп Физика (Репнев) 402"], 
            [3, "ИНФО (Воронцов) 409 / ИНФО (Аларкон) 408"], 
            [4, "ИНФО (Воронцов) 409 / ИНФО (Аларкон) 408"], 
            [5, "Биология (Белоусова) 405 / Алгебра (Дронзик) 210"], 
            [6, "Биология (Белоусова) 405 / Алгебра (Дронзик) 210"], 
            [7, "Алгебра (Дронзик) 210 / Биология (Белоусова) 405"], 
            [8, "Алгебра (Дронзик) 210 / Биология (Белоусова) 405"], 
            [9, "ДОП Практическая электроника (Рогацкина) 410"], 
            [10, "ДОП Практическая электроника (Рогацкина) 410"]], 
        8: [[1, "ФИЗ-РА (Ларченко) 127 /"], 
            [2, "ФИЗ-РА (Ларченко) 127 /"], 
            [3, "Русский Язык (Харитонов) 201 / ФИЗ-РА (Ларченко) 127"], 
            [4, "Литература (Харитонов) 201 / ФИЗ-РА (Ларченко) 127"], 
            [5, "ИНФО (Воронцов) 409 / ИНФО (Аларкон) 402	"], 
            [6, "ИНФО (Воронцов) 409 / ИНФО (Аларкон) 402	"], 
            [7, "Физика (Репнев) 402 / Литература (Харитонов) 201"], 
            [8, "Физика (Репнев) 402 / Литература (Харитонов) 201"], 
            [9, "Литература (Харитонов) 201 / Театр 504"], 
            [10, "/ Театр 504"]], 
        9: [[1, "Математика (Заводов АА) 209"], 
            [2, "Математика (Заводов АА) 209"], 
            [3, "Биология (Белоусова) 405"], 
            [4, "Биология (Белоусова) 405"], 
            [5, "ФИЗ-РА (Ларченко) 127"], 
            [6, "ФИЗ-РА (Ларченко) 127"], 
            [7, "Самоподготовка к ОГЭ 403 / Олимп Физика (Дьяченко) 401"], 
            [8, "Самоподготовка к ОГЭ 403 / Олимп Физика (Дьяченко) 401"], 
            [9, "ИНФО (Воронцов) 409"], 
            [10, "ИНФО (Воронцов) 409"]], 
        10: [[1, "Допматпрак 405 (Попович) / ЕГЭ Физика (Дьяченко) 401"], 
            [2, "Допматпрак 405 (Попович) / ЕГЭ Физика (Дьяченко) 401"], 
            [3, "Физика (Дьяченко) 401"], 
            [4, "Физика (Дьяченко) 401"], 
            [5, "Математика (Заводов АА) 209"], 
            [6, "Математика (Заводов АА) 209"], 
            [7, "ИНФО (Воронцов) 409"], 
            [8, "ИНФО (Воронцов) 409"], 
            [9, "Биология (Белоусова) 405"]], 
        11: [[1, "ЕГЭ Физика (Дьяченко) 401 /"], 
            [2, "ЕГЭ Физика (Дьяченко) 401 / Обществознание (Белоус) 404"], 
            [3, "Математика (Заводов АА) 209 / Обществознание (Белоус) 404"], 
            [4, "Математика (Заводов АА) 209 / Обществознание (Белоус) 404"], 
            [5, "Физика (Дьяченко) 401 / Обществознание (Белоус) 404"], 
            [6, "Физика (Дьяченко) 401 / Обществознание (Белоус) 404"], 
            [7, "Театр 504"], 
            [8, "Театр 504"], 
            [9, "Инфо (Воронцов) 409"], 
            [10, "Инфо (Воронцов) 409"]]
    },
    4: {
        5: [[1, "Биология (Носкова) 210"], 
            [2, "Биология (Носкова) 210"], 
            [3, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
            [4, "Англ (Домбровская) 405 / Англ (Слоневская) 404"], 
            [5, "Математика (Кореневский) 401"], 
            [6, "Математика (Кореневский) 401"], 
            [7, "Хор (Краснова + Никулова) 116"], 
            [8, "История (Товченников) 404"], 
            [9, "Кружок ГО (Хоменко, Мхайлов) 201"], 
            [10, "Кружок ГО (Хоменко, Мхайлов) 201"]], 
        6: [[1, "Театр 504 / История (Товченников) 409"], 
            [2, "Театр 504 / История (Товченников) 409"], 
            [3, "Биология (Носкова) 210"], 
            [4, "Биология (Носкова) 210"], 
            [5, "Англ (Алёхина) 403 / Англ (Шевелев) 406"], 
            [6, "Англ (Алёхина) 403 / Англ (Шевелев) 406"], 
            [7, "Обществознание (Товченников) 404"], 
            [8, "Хор (Краснова + Никулова) 116"], 
            [9, "Хор (Краснова + Никулова) 116 / СТF (Филатов) 403"], 
            [10, "Доп. Хор (Краснова+Никулова) 116 / СТF (Филатов) 403"], 
            [11, "Доп. Хор (Краснова+Никулова) 116 / СТF (Филатов) 403"]], 
        7: [[1, "Англ (Алёхина) 403 / Англ (Шевелев) 406"], 
            [2, "Англ (Алёхина) 403 / Англ (Шевелев) 406"], 
            [3, "Русский (Хуснутдинов) 201"], 
            [4, "Русский (Хуснутдинов) 201"], 
            [5, "Физика (Репнев) 402 / Литература (Решетников НА) 201"], 
            [6, "Физика (Репнев) 402 / Литература (Решетников НА) 201"], 
            [7, "Литература (Решетников НА) 201 / Физика (Репнев) 402"], 
            [8, "Литература (Решетников НА) 201 / Физика (Репнев) 402"], 
            [9, "История (Товченников) 404 / СТF (Филатов) 403 / Театр 508"], 
            [10, "История (Товченников) 404 / СТF (Филатов) 403 / Театр 508"], 
            [11, "Доп. Хор (Краснова+Никулова) 116 / СТF (Филатов) 403	"], 
            [12, "Доп. Хор (Краснова+Никулова) 116"]], 
        8: [[1, "ДОП Олимп.экономика (Кирюшин) 202 / Англ (Домбровская) 405	Англ (Слоневская) 404"], 
            [2, "ДОП Олимп.экономика (Кирюшин) 202 / Англ (Домбровская) 405	Англ (Слоневская) 404"], 
            [3, "Театр 508 / Физика (Репнев) 402"], 
            [4, "Театр 508 / Физика (Репнев) 402"], 
            [5, "Англ (Домбровская) 405 / Англ (Слоневская) 404 / Хор (Краснова + Никулова) 116"], 
            [6, "Англ (Домбровская) 405 / Англ (Слоневская) 404 / Хор (Краснова + Никулова) 116"], 
            [7, "ОБЖ (Носкова) 210	 / Геометрия (Кореневский) 401"], 
            [8, "Геометрия (Кореневский) 401 / ОБЖ (Носкова) 210"], 
            [9, "Олимп Физика (Репнев) 402 / ДОП Олимп. Геометрия (Кореневский) 401 / ДОП СТF (Филатов) 403"], 
            [10, "Олимп Физика (Репнев) 402 / ДОП Олимп. Геометрия (Кореневский) 401 / ДОП СТF (Филатов) 403"], 
            [11, "Доп. Хор (Краснова+Никулова) 116 / ДОП СТF (Филатов) 403"], 
            [12, "Доп. Хор (Краснова+Никулова) 116"]], 
        9: [[1, "/ ИНФО (Аларкон) 408"], 
            [2, "МХК (Хуснутдинов) 201 / ИНФО (Аларкон) 408"], 
            [3, "Матанализ (Попович) 209"], 
            [4, "Матанализ (Попович) 209"], 
            [5, "Матпрак (Латыпова + Исмаилов) 409 / Театр 508"], 
            [6, "Матпрак (Латыпова + Исмаилов) 409 / Театр 508"], 
            [7, "Театр 508 / Матпрак (Латыпова + Исмаилов) 409"], 
            [8, "Театр 508 / Матпрак (Латыпова + Исмаилов) 409"], 
            [9, "Литература (Пипейкина) 202"], 
            [10, "Литература (Пипейкина) 202"], 
            [11, "Доп. Хор (Краснова+Никулова) 116"], 
            [12, "Доп. Хор (Краснова+Никулова) 116"]], 
        10: [[1, "Театр 508"], 
            [2, "Театр 508"], 
            [3, "Русский (Пипейкина) 202"], 
            [4, "Хор (Краснова + Никулова) 116"], 
            [5, "ОБЖ (Носкова) 210"],
            [6, "Матанализ (Попович) 209"], 
            [7, "Матанализ (Попович) 209"], 
            [8, "Русский (Пипейкина) 202"], 
            [9, "Олимп. Геометрия (Попович) 209"], 
            [10, "Олимп. Геометрия (Попович) 209"], 
            [11, "Доп. Хор (Краснова+Никулова) 116"], 
            [12, "Доп. Хор (Краснова+Никулова) 116"]], 
        11: [[1, "Матанализ (Попович + Бирюкова) 209	/ Философия (Куницын) 116"], 
            [2, "Матанализ (Попович + Бирюкова) 209	/ Философия (Куницын) 116"], 
            [3, "Хор (Краснова + Никулова) 116"], 
            [4, "Русский (Пипейкина) 202"], 
            [5, "Литература (Пипейкина) 202"], 
            [6, "Русский (Пипейкина) 202"], 
            [7, "Русский (Пипейкина) 202"], 
            [8, "Астрономия (Угольников) 405"], 
            [9, "ДОП Астрономия (Угольников) 405 /"], 
            [10, "ДОП Астрономия (Угольников) 405 / Доп. Хор (Краснова+Никулова) 116"], 
            [11, "/ Доп. Хор (Краснова+Никулова) 116"], 
            [12, "/ Доп. Хор (Краснова+Никулова) 116"]]
    },
}

def update_childrens():
    df = pd.read_table('childrens.tsv')
    for i in df.itertuples():
        childrens.append(list((str(i[2]).strip(), str(i[3]).strip(), str(i[4]).strip(), str(i[5]).strip())))

update_childrens()

# def update_teachers():
#     tch = pd.read_table('teachers.tsv')
#     for i in tch.itertuples():
#         print((str(i[1]).strip()))
#         teachers.append(list((str(i[1]).strip(), str(i[2]).strip(), str(i[3]).strip())))


# update_teachers()


def is_reg(message):
    conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
    cur = conn.cursor()

    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    # print(users)
    tf = False
    for i in users:
        if i[0] == message.from_user.id:
            tf = True
    return tf

def is_admin(message):
    conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
    cur = conn.cursor()

    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    print(users)
    tf = False
    for i in users:
        if i[0] == message.from_user.id:
            print(i[5])
            if i[5] == "creator" or "admin admin":
                tf = True
    return tf

def user_clas(message):
    conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
    cur = conn.cursor()

    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    for i in users:
        if i[0] == message.from_user.id:
            return i[3]
    return None

def new_log(text):
    now = datetime.now()
    conn = sqlite3.connect("data.shw")
    cur = conn.cursor()
    cur.execute("INSERT INTO logs (text) VALUES ('%s')" % (f"{text}\ndatatime: {now}"))
    conn.commit()
    cur.close()
    conn.close()

def take_weekday(year, month, day):
    date = datetime(year, month, day, 0, 0)
    return date.isoweekday()

def new_hw(date, clas, text, lesson):
    cur = conn.cursor()
    cur.execute("INSERT INTO homeworks (class, text, lesson, data) VALUES ('%s', '%s', '%s', '%s')" % (clas, text, lesson, date))
    conn.commit()
    cur.close()
    conn.close()

def is_student(message):
    conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
    cur = conn.cursor()

    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    print(users)
    tf = False
    for i in users:
        if i[0] == message.from_user.id:
            print(i[2])
            if i[2] == "student":
                tf = True
    print(tf)
    return tf

def is_teacher(message):
    conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
    cur = conn.cursor()

    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    print(users)
    tf = False
    for i in users:
        if i[0] == message.from_user.id:
            print(i[2])
            if i[2] == "teacher":
                tf = True
    return tf

def is_family(message):
    conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
    cur = conn.cursor()

    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    print(users)
    tf = False
    for i in users:
        if i[0] == message.from_user.id:
            print(i[2])
            if i[2] == "family":
                tf = True
    return tf

def generate_family_code():
    characters = string.ascii_letters + string.digits
    code = "".join(random.choice(characters) for _ in range(16))
    return code

def is_notacceptfamily(message):
    conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
    cur = conn.cursor()

    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    print(users)
    tf = False
    for i in users:
        if i[0] == message.from_user.id:
            print(i[2])
            if i[2] == "notacceptfamily":
                tf = True
    return tf

for i in range(0):
    new_log("abc")

print(f'Запуск завершён. Он продлился {datetime.now() - start_time}')

@bot.message_handler(commands=["start"])
def main(message):
    if not (is_reg(message)):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("Ученик", callback_data="yes_registred_me"))
        markup.add(types.InlineKeyboardButton('Учитель', callback_data='fio_t'))
     #   markup.add(types.InlineKeyboardButton("Родственник", callback_data="fio_f"))
        bot.send_message(message.chat.id, f"Здравствуйте, {message.from_user.first_name}! Вы должны зарегестрироваться. Кто вы?", reply_markup=markup)
    elif is_student(message):
        bot.send_message(message.chat.id, f"Здравствуйте, {message.from_user.first_name}! Вы зарегистрированы как ученик!")
    elif is_teacher(message):
        bot.send_message(message.chat.id, f"Здравствуйте, {message.from_user.first_name}! Вы зарегистрированы как учитель!")
  #  elif is_family(message):
 #       bot.send_message(message.chat.id, f"Здравствуйте, {message.from_user.first_name}! Вы зарегистрированы как родитель!")
    
@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == "student":
        bot.send_message(
            callback.message.chat.id, f"Пропишите /reg"
        )
    elif callback.data == "teacher":
        bot.send_message(
            callback.message.chat.id, f"Пропишите /regt"
        )
    elif callback.data == "yes_registred_me":
        bot.send_message(callback.message.chat.id, f"Пожалуйста, введите свой класс. Например 6с, 11с")
        bot.register_next_step_handler(callback.message, clas)
    
    elif callback.data == "fio_t":#                                                                                                                    здесь
        bot.send_message(callback.message.chat.id, f"Теперь напишите своё ФИО (Не ИОФ, не ФОИ, а ФИО!!!)")
        bot.register_next_step_handler(callback.message, teachfio)

   # elif callback.data == "fio_f":
    #    bot.send_message(callback.message.chat.id, f"Теперь напишите своё ФИО (Не ИОФ, не ФОИ, а ФИО!!!)")
     #   bot.register_next_step_handler(callback.message, parentfio)
        
        
    elif callback.data == "c5":
        td = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        for i in range(5):
            outp += f"\n{days[i]}\n"
            j = 5
            # outp += f"  Класс {j}\n"
            for ij in rasp[i][j]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "c6":
        td = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        for i in range(5):
            outp += f"\n{days[i]}\n"
            j = 6
            # outp += f"  Класс {j}\n"
            for ij in rasp[i][j]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "c7":
        td = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        for i in range(5):
            outp += f"\n{days[i]}\n"
            j = 7
            # outp += f"  Класс {j}\n"
            for ij in rasp[i][j]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "c8":
        td = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        for i in range(5):
            outp += f"\n{days[i]}\n"
            j = 8
            # outp += f"  Класс {j}\n"
            for ij in rasp[i][j]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "c9":
        td = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        for i in range(5):
            outp += f"\n{days[i]}\n"
            j = 9
            # outp += f"  Класс {j}\n"
            for ij in rasp[i][j]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "c10":
        td = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        for i in range(5):
            outp += f"\n{days[i]}\n"
            j = 10
            # outp += f"  Класс {j}\n"
            for ij in rasp[i][j]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "c11":
        td = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        for i in range(5):
            outp += f"\n{days[i]}\n"
            j = 11
            # outp += f"  Класс {j}\n"
            for ij in rasp[i][j]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "nd5":
        now = datetime.now()
        td = now.weekday()
        wd = int(td)
        if wd < 4:
            wd += 1
        else:
            wd = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        outp += f"{days[wd % 7]}\n"
        for j in range(5, 6):
            outp += f"  Класс {j}\n"
            for ij in rasp[int(wd)][int(j)]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "nd6":
        now = datetime.now()
        td = now.weekday()
        wd = int(td)
        if wd < 4:
            wd += 1
        else:
            wd = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        outp += f"{days[wd % 7]}\n"
        for j in range(6, 7):
            outp += f"  Класс {j}\n"
            for ij in rasp[int(wd)][int(j)]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "nd7":
        now = datetime.now()
        td = now.weekday()
        wd = int(td)
        if wd < 4:
            wd += 1
        else:
            wd = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        outp += f"{days[wd % 7]}\n"
        for j in range(7, 8):
            outp += f"  Класс {j}\n"
            for ij in rasp[int(wd)][int(j)]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "nd8":
        now = datetime.now()
        td = now.weekday()
        wd = int(td)
        if wd < 4:
            wd += 1
        else:
            wd = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        outp += f"{days[wd % 7]}\n"
        for j in range(8, 9):
            outp += f"  Класс {j}\n"
            for ij in rasp[int(wd)][int(j)]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "nd9":
        now = datetime.now()
        td = now.weekday()
        wd = int(td)
        if wd < 4:
            wd += 1
        else:
            wd = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        outp += f"{days[wd % 7]}\n"
        for j in range(9, 10):
            outp += f"  Класс {j}\n"
            for ij in rasp[int(wd)][int(j)]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "nd10":
        now = datetime.now()
        td = now.weekday()
        wd = int(td)
        if wd < 4:
            wd += 1
        else:
            wd = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        outp += f"{days[wd % 7]}\n"
        for j in range(10, 11):
            outp += f"  Класс {j}\n"
            for ij in rasp[int(wd)][int(j)]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')
    elif callback.data == "nd11":
        now = datetime.now()
        td = now.weekday()
        wd = int(td)
        if wd < 4:
            wd += 1
        else:
            wd = 0
        days = [
            "Понедельник",
            "Вторник",
            "Среда",
            "Четверг",
            "Пятница",
            "Суббота",
            "Воскресенье",
        ]
        outp = ""
        outp += f"{days[wd % 7]}\n"
        for j in range(11, 12):
            outp += f"  Класс {j}\n"
            for ij in rasp[int(wd)][int(j)]:
                outp += f"    Урок №{ij[0]} - {ij[1]}\n"
        bot.send_message(callback.message.chat.id, f'{outp}')

@bot.message_handler(commands=["reg"])
def register(message):
    if not (is_reg(message)):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("Да", callback_data="yes_registred_me"))
        bot.send_message(message.chat.id, f"Вы хотите зарегистрироватся как ученик?", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"Вы уже зарегистрированны!")

@bot.message_handler(commands=["regt"])
def register_t(message):
    if not (is_reg(message)):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("Да", callback_data="fio_t"))
        bot.send_message(message.chat.id, f"Вы хотите зарегистрироваться как учитель?", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"Вы уже зарегистрированы!")
              
def clas(message):
    global cl
    cl = message.text.strip().lower()
    if cl in clases:
        bot.send_message(
            message.chat.id,
            f"Класс выбран. Теперь напишите своё ФИО (Не ИОФ, не ФОИ а ФИО!!!)",
        )
        bot.register_next_step_handler(message, fio)
    else:
        bot.send_message(
            message.chat.id,
            f"Мы не нашли этот класс! Возможно это из-за того, что админы не добавили его. Напишите им. ({admins})",
        )


def teachfio(message):
    fiotext = message.text.strip()

    true_name = False
    
    for i in teachers:
        print(f'{i[0]} {i[1]} {i[2]} --- {fiotext.split()[0]} {fiotext.split()[1]} {fiotext.split()[2]}')
        if i[1] == fiotext.split()[0] and i[2] == fiotext.split()[1]:
            true_name = True
    if true_name:
        bot.send_message(message.chat.id, f"Ура! Вы зарегистрированы! Введите /start!")
        new_log(f"{fiotext} ({message.from_user.id}) reg how to teacher")
    else:
        bot.send_message(message.chat.id, f"Не правильное имя. Напишите /regt и попробуйте снова!")

def fio(message):
    fiotext = message.text.strip()

    true_name = False
    print(childrens)
    for i in childrens:
        # print(i)
        print(f'({i[0]} {i[1]} {i[2]} {i[3]}) - ({cl.upper()} {fiotext.split()[0]} {fiotext.split()[1]} {fiotext.split()[2]})')
        if i[0] == cl.upper() and i[1] == fiotext.split()[0] and i[2] == fiotext.split()[1] and i[3] == fiotext.split()[2]:
            true_name = True
            # break
    if true_name:
        is_admin = "false"

        if fiotext == "Гусев Артём Алексеевич":
            is_admin = "creator"
        elif fiotext == "Андреенко Мария Владиславовна":
            is_admin = "creator"

        conn = sqlite3.connect("data.shw")
        cur = conn.cursor()
        cur.execute("INSERT INTO users (id, name, type, class, mut, admin) VALUES ('%s', '%s', 'student', '%s', 'false', '%s')" % (message.from_user.id, fiotext, cl, is_admin))
        conn.commit()
        cur.close()
        conn.close()

        bot.send_message(message.chat.id, f"Ура! Вы зарегистрированы! Введите /start!")
        new_log(f"{fiotext} ({message.from_user.id}) reg how to student")
    else:
        bot.send_message(message.chat.id, f"Не правильное имя. Напишите /reg и попробуйте снова!")

@bot.message_handler(commands=["addteach"])
def main(message):
    if is_reg(message):
        if not (is_admin(message)):
            bot.send_message(message.chat.id, f"Вы не являетесь админом!")
        else:
            bot.send_message(message.chat.id, f"Хорошо, вы админ! Введите ID учителя.")
            bot.register_next_step_handler(message, teacher_ID)
    else:
        bot.send_message(message.chat.id, f"К сожалению вы ещё не зарегистрированы")

def teacher_ID(message):
    global teachID
    teachID = message.text.strip().lower()
    bot.send_message(message.chat.id, f"Теперь введите его имя!")
    bot.register_next_step_handler(message, teacher_name)

def teacher_name(message):
    global teachname
    teachname = message.text.strip()
    bot.send_message(message.chat.id, f"Теперь введите его предмет на английском.")
    bot.register_next_step_handler(message, teacher_class)

def teacher_class(message):
    teachclass = message.text.strip().lower()
    bot.send_message(message.chat.id, f"Ура! Теперь мы зарегистрируем {teachname}!")
    conn = sqlite3.connect("data.shw")
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO users (id, name, type, class, mut, admin) VALUES ('%s', '%s', 'teacher', '%s', 'false', 'false')"
        % (teachID, teachname, teachclass)
    )
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(
        message.chat.id, f"Учитель зарегистрирован."
    )
    new_log(
        f"{message.from_user.first_name} ({message.from_user.id}) reg {teachname} ({teachID}) how to teacher"
    )

def reg(message):
    text = message.text.strip().split()
    conn = sqlite3.connect("data.shw")
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO users (id, name, type, class, mut, admin) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')"
        % (text[0], text[1:3], text[4], text[5], text[6], text[7])
    )
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(
        message.chat.id,
        f"Учитель зарегистрирован! Вы можете проверить это через /allr",
    )
    bot.send_message(text[0], f"Вас добавили! Напишите /start чтобы это проверить")

@bot.message_handler(commands=["allr"])
def main(message):
    conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
    cur = conn.cursor()

    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    info = ""
    for i in users:
        info += f"ID: {i[0]}\nИмя: {i[1]}\nТип: {i[2]}\nКласс: {i[3]}\nМут: {i[4]}\nАдмин: {i[5]}\n\n"

    if info == "":
        info = "Ещё никто не зарегистрирован"

    bot.send_message(message.chat.id, info)
    cur.close()
    conn.close()

@bot.message_handler(commands=["hw", "homeworks"])
def main(message):
    if is_reg(message):
        outp = ""
        if is_family(message) or is_teacher(message) or is_student(message):
            outp += "/tdhw или /todayhomework - Посмотреть ДЗ на сегодня\n"
        if is_family(message) or is_teacher(message) or is_student(message):
            outp += "/nexthw - Посмотреть ДЗ на завтра\n"
        if is_family(message) or is_teacher(message) or is_student(message):
            outp += (
                "/nwhw или /nextweekhomework - Посмотреть ДЗ на всю оставшуюся неделю\n"
            )
        if is_teacher(message) or is_student(message):
            outp += "/ehw или /edithomework - Редактировать домашнее задание\n"
        outp += "/rasp - расписание на эту неделю (или на следующую, если сейчас выходной)\n"
        outp += "/raspnd - расписание на следующий день\n"
        bot.send_message(
            message.chat.id,
            f"Здравствуйте, {message.from_user.first_name}! Сейчас вы можете сделать это: \n{outp}",
        )
    else:
        bot.send_message(
            message.chat.id,
            f"Здравствуйте, {message.from_user.first_name}! К сожалению вы не зарегистрированы. Вам нужно сделать это прописав /start",
        )

@bot.message_handler(commands=["nexthw"])
def main(message):
    outp = ""
    hw = []

    conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
    cur = conn.cursor()

    cur.execute("SELECT * FROM homeworks")
    homeworks = cur.fetchall()
    
    for i in homeworks:
        if i[7] == datetime.date() + 1:
            hw.append(i)

    cur.close()
    conn.close()

    outp = str(hw)

    if outp == "":
        outp = "Тут ничего нет"
    bot.send_message(message.chat.id, f"Домашнее задание на завтра\n{outp}")

@bot.message_handler(commands=["ehw", "edithomework"])
def main(message):
    if is_student(message) or is_teacher(message):
        if message.text.strip() == '/ehw' or message.text.strip() == '/edithomework':
            bot.send_message(message.chat.id, f'После {message.text.strip()} введите дату на которое вы хотите изменить дз в формате {message.text.strip()} гггг мм дд.')
        else:
            global ehwdate
            ehwdate = message.text.strip().split()[1:4]
            tf = True
            try:
                ehwdate[0] = int(ehwdate[0])
            except:
                tf = False
            
            try:
                ehwdate[1] = int(ehwdate[1])
            except:
                tf = False
            
            try:
                ehwdate[2] = int(ehwdate[2])
            except:
                tf = False
            
            print(ehwdate)
            global sethwlist
            sethwlist = []
            if tf:
                if is_student(message):
                    if take_weekday(ehwdate[0], ehwdate[1], ehwdate[2]) > 4:
                        bot.send_message(message.chat.id, f'Вы не можете редактировать домашнее задание на субботу или воскресенье')
                    else:
                        outp = 'На какой урок вы хотите изменить домашнее задание?\n'
                        for i in rasp[take_weekday(ehwdate[0], ehwdate[1], ehwdate[2])][int(user_clas(message)[:-1])]:
                            sethwlist.append(i)
                        for i in range(len(sethwlist)):
                            outp += f'{i + 1} - {sethwlist[i]}\n'
                        bot.send_message(message.chat.id, f'{outp}')
                        bot.register_next_step_handler(message, sethwlistfunc)
                elif is_teacher(message):
                    outp = 'Для какого класса вы хотите домашнее задание?'
                    # for i in rasp[take_weekday(ehwdate[0], ehwdate[1], ehwdate[2])]:
                        # =
                    if take_weekday(ehwdate[0], ehwdate[1], ehwdate[2]) > 4:
                        bot.send_message(message.chat.id, f'Вы не можете редактировать домашнее задание на субботу или воскресенье')
                    else:
                        outp = 'На какой урок вы хотите изменить домашнее задание?\n'
                        for i in rasp[take_weekday(ehwdate[0], ehwdate[1], ehwdate[2])][int(user_clas(message)[:-1])]:
                            sethwlist.append(i)
                        for i in range(len(sethwlist)):
                            outp += f'{i + 1} - {sethwlist[i]}\n'
                        bot.send_message(message.chat.id, f'{outp}')
                        bot.register_next_step_handler(message, sethwlistfunc)
            else:
                bot.send_message(message.chat.id, f'Вы не правильно ввели дату')
    else:
        bot.send_message(message.chat.id, f'Вы не ученик и не учитель')

def sethwlistfunc(message):
    global hwlistchoose
    hwlistchoose = message.text.strip()
    if is_student(message):
        outp = f'Вы выбрали {sethwlist[int(hwlistchoose) - 1][1]}.\nТеперь введите то, на что вы хотите заменить дз'
    elif is_teacher(message):
        outp = f'Вы выбрали {sethwlist[int(hwlistchoose) - 1][1]}.\n'
    bot.send_message(message.chat.id, f'{outp}')

def sethwtextfunc(message):
    text = message.text.strip()
    new_hw(f'{ehwdate[0]} {ehwdate[1]} {ehwdate[2]}', user_clas(message), text, sethwlist[int(hwlistchoose) - 1][1])
    bot.send_message(message.chat.id, f'Ура, вы отредактировали задание')
    
@bot.message_handler(commands=["tdhw", "todayhomework"])
def main(message):
    outp = ""
    hw = []

    conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
    cur = conn.cursor()

    cur.execute("SELECT * FROM homeworks")
    homeworks = cur.fetchall()
    
    for i in homeworks:
        if i[7] == datetime.date():
            hw.append(i)

    cur.close()
    conn.close()

    outp = str(hw)

    if outp == "":
        outp = "Тут ничего нет"
    bot.send_message(message.chat.id, f"Домашнее задание на сегодня\n{outp}")

@bot.message_handler(commands=["rasp"])
def main(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("5", callback_data="c5")
    btn2 = types.InlineKeyboardButton("6", callback_data="c6")
    btn3 = types.InlineKeyboardButton("7", callback_data="c7")
    btn4 = types.InlineKeyboardButton("8", callback_data="c8")
    btn5 = types.InlineKeyboardButton("9", callback_data="c9")
    btn6 = types.InlineKeyboardButton("10", callback_data="c10")
    btn7 = types.InlineKeyboardButton("11", callback_data="c11")
    markup.row(btn1, btn2, btn3, btn4, btn5, btn6, btn7)
    bot.send_message(message.chat.id, f"За какой класс вам вывести расписание?", reply_markup=markup)

@bot.message_handler(commands=["raspnd"])
def main(message):
    
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("5", callback_data="nd5")
    btn2 = types.InlineKeyboardButton("6", callback_data="nd6")
    btn3 = types.InlineKeyboardButton("7", callback_data="nd7")
    btn4 = types.InlineKeyboardButton("8", callback_data="nd8")
    btn5 = types.InlineKeyboardButton("9", callback_data="nd9")
    btn6 = types.InlineKeyboardButton("10", callback_data="nd10")
    btn7 = types.InlineKeyboardButton("11", callback_data="nd11")
    markup.row(btn1, btn2, btn3, btn4, btn5, btn6, btn7)
    bot.send_message(message.chat.id, f"За какой класс вам вывести расписание?", reply_markup=markup)
    

@bot.message_handler(commands=["tasks"])
def main(message):
    if not (message.from_user.id in tas):
        a = random.randint(1, 2)
        tas.append(message.from_user.id)
        if a == 1:
            bot.send_message(
                message.chat.id,
                f"Ты думал, что тут что-то будет? Да тут должен был быть рикролл, но его съели. Так что рикролла не будет. И даже не подходи ко мне.",
            )
            new_log(f"{message.from_user.id} думал что в /tasks что-то будет")
        elif a == 2:
            new_log(f"{message.from_user.id} решил посмотреть техноденс")
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(
                    "Нажми на кнопку!",
                    url="https://www.youtube.com/watch?v=PkFGBIZWe-8",
                )
            )
            bot.send_message(message.chat.id, f"Нажми на кнопку!", reply_markup=markup)
    # else:
    # bot.send_message(message.chat.id, f'Я же сказал не подходить ко мне!!!')

@bot.message_handler(commands=["logs"])
def main(message):
    if is_admin(message):
        a = 10
        conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
        cur = conn.cursor()

        cur.execute("SELECT * FROM logs")
        logs = cur.fetchall()

        counter = 1

        printer = ""

        for i in logs:
            if counter >= len(logs) - a + 1:
                printer += f"{counter}) {i[0]}\n\n"
            counter += 1

        cur.close()
        conn.close()
        bot.send_message(
            message.chat.id, f"Последние {min(10, counter - 1)} логов:\n\n{printer}"
        )
    else:
        bot.send_message(message.chat.id, f"Вы не админ. Не лезьте сюда.")

@bot.message_handler(commands=["weather"])
def main(message):
    global bet_weather
    if bet_weather:
        try:
            weather = requests.get(get_weather_URL)
            if weather.status_code == 200:
                bot.send_message(message.chat.id, f"Мы начали поиск погоды. Если вы долго не получаете ответ, значит погода сломалась")
                weather = requests.get(get_weather_URL)
                if weather.status_code == 200:
                    data = json.loads(weather.text)
                    main_0 = data["weather"][0]["main"]
                    if main_0 == "Clouds":
                        main_0 = "Облачно"
                    elif main_0 == "Clear":
                        main_0 = "Ясно"
                    elif main_0 == "Snow":
                        main_0 = "Снежно"
                    elif main_0 == "Rain":
                        main_0 = "Дождь"
                    main_0 = data["weather"][0]["description"]
                    main_0 = f'{main_0[0].upper()}{main_0[1: ]}'
                    bot.reply_to(message, f'Сейчас погода в Москве:\nТемпература: {int(data["main"]["temp"])}°C (ощущается как {data["main"]["feels_like"]}°C)\n{main_0}',)
            else:
                bot.send_message(1133611562, f"Сломалась погода. Логи:\n\n{weather}\n\n{weatherAPIkey}\n\n{get_weather_URL}")
                bot.reply_to(message, f"Кажется у нас что-то сломалось. Мы уже написали в админам")
                bet_weather = False
        except:
            bot.send_message(1133611562, f"Сломалась погода. Логи:\n\n{weather}\n\n{weatherAPIkey}\n\n{get_weather_URL}")
            bot.reply_to(message, f"Кажется у нас что-то сломалось. Мы уже написали в администраторам")
            bet_weather = False    
    else:
        bot.send_message(1133611562, f"Погода сломалась. Попробуйте позже")

@bot.message_handler(commands=["megapublick"])
def main(message):
    if not(is_admin(message)):
        bot.send_message(message.chat.id, f"Кажется вы не админ")
    else:
        text = message.text[13:]
        channelID = int(-1001990664737)
        admingroupID = int(-1002020426202)
        if text != '':
            bot.send_message(channelID, text)
            bot.send_message(admingroupID, f'Общая рассылка:\n\n{text}\n\nНаписано @{message.from_user.username}.')
            conn = sqlite3.connect("data.shw")  # shw - SilHomeWorks
            cur = conn.cursor()

            cur.execute("SELECT * FROM users")
            users = cur.fetchall()
            # print(users)
            tf = False
            for i in users:
                bot.send_message(i[0], f'Общая рассылка:\n\n{text}\n\nНаписано @{message.from_user.username}.')
        else:
            bot.send_message(message.chat.id, 'Рассылка работает так: вы пишете команду /megapublick, а после этой команды вводите текст для публикации, например "/megapublick Всем привет, это рассылка!"')

@bot.message_handler(commands=["howtimebotworking"])
def main(message):
    time = datetime.now() - start_time
    bot.send_message(message.chat.id, f'Бот был запущен {time.days} дней {time.seconds // 60 // 60} часов {time.seconds // 60} минут {time.seconds % 60} секунд назад.')

@bot.message_handler(commands=["publickclass"])
def main(message):
    if not(message.chat.id == 6593245286) and not(message.chat.id == 1378547324):
        tt = message.text[14:]
        if tt != '':
            if not(is_admin(message)) and not(is_teacher(message)):
                bot.send_message(message.chat.id, f"у вас нет доступа")
            else:
                conn = sqlite3.connect("data.shw") 
                cur = conn.cursor()
                cur.execute("SELECT * FROM users")
                users = cur.fetchall()
                for i in users:
                    klas = message.text[14:16]
                    text = message.text[16:]
                    if i[3] == klas:
                        bot.send_message(i[0], f'{text}\n\nНаписал: @{message.from_user.username}')
                    elif i[3] == klas:
                        bot.send_message(i[0], f'{text}\n\nНаписал: @{message.from_user.username}')
                    elif i[3] == klas:
                        bot.send_message(i[0], f'{text}\n\nНаписал: @{message.from_user.username}')
                    elif i[3] == klas:
                        bot.send_message(i[0], f'{text}\n\nНаписал: @{message.from_user.username}')
                    elif i[3] == klas:
                        bot.send_message(i[0], f'{text}\n\nНаписал: @{message.from_user.username}')
                    elif i[3] == klas:
                        bot.send_message(i[0], f'{text}\n\nНаписал: @{message.from_user.username}')
                    elif i[3] == klas:
                        bot.send_message(i[0], f'{text}\n\nНаписал: @{message.from_user.username}')
                    klas = message.text[14:17]
                    text = message.text[17:]
                    if i[3] == klas:
                        bot.send_message(i[0], f'{text}\n\nНаписал: @{message.from_user.username}')
                    elif i[3] == klas:
                        bot.send_message(i[0], f'{text}\n\nНаписал: @{message.from_user.username}')
        else:
            bot.send_message(message.chat.id, 'Напишите еще раз добавив класс и текст который нужен. Пример: /publickclass 7т Абв')

@bot.message_handler(commands=["docs"])
def main(message):
    bot.send_message(message.chat.id, f'/start - начать\n/reg - регистрация\n/addfamily - добавить родственников\n/docs - список команд\n\n/raspnd - расписание на завтра\n/rasp - все расписание\n\n/hw - посмотреть ДЗ\n/tdhw или /todayhomework - ДЗ на сегодня\n/nexthw - ДЗ на завтра\n/nwhw или /nextweekhomework - ДЗ на всю оставшуюся неделю\n/ehw или /edithomework - редактировать ДЗ\n\n/megapublick - рассылка всем\n/publickclass - рассылка по классам\n\n/weather - узнать погоду сейчас\n/tasks - пасхалка\n\n/allr - все зарегистрированные(для админов)\n/goals - задачи(для админов)\n/logs - узнать последние логи(для админов)\n/howtimebotworking - время работы(для админов)')

@bot.message_handler(commands=["stop"])
def stop(message):
    print('Остановлено')
    bot.stop_polling()

bot.infinity_polling()